{"ast":null,"code":"import Student from \"./components/Student\";\nimport School from \"./components/School\";\nexport default {\n  name: \"App\",\n  components: {\n    School,\n    Student\n  },\n  data() {\n    return {\n      msg: \"你好啊！\",\n      studentName: \"\"\n    };\n  },\n  methods: {\n    // 自定义事件myEvent的回调函数\n    getStudentName(name, ...params) {\n      // ...表示剩余参数，即name接收第一个参数，剩余的参数由params数组接收。\n      console.log(\"App收到了学生名：\", name, params);\n      this.studentName = name;\n    },\n    myTest() {\n      console.log(\"myEvent2事件被触发了！\");\n    },\n    getSchoolName(name) {\n      console.log(\"App收到了学校名：\", name);\n    },\n    getSchoolAddress(address) {\n      console.log(\"App收到了学校地址：\" + address);\n    }\n  },\n  mounted() {\n    this.$refs.school.$on(\"myEvent3\", this.getSchoolName); //使用$on()方法绑定自定义事件\n    this.$refs.school.$once(\"myEvent4\", this.getSchoolAddress); //绑定自定义事件（一次性）\n    /* \t$emit()方法传递的参数会传给$on()方法中的第二个参数使用，第二个参数是一个回调函数。\r\n    $on()方法中回调函数的this是该方法调用者，即School组件实例。\r\n    但是这里是写在mounted函数中，使用this调用了methods中的方法，this指的是当前App组件实例对象。\r\n    如果直接写回调函数例如$on('myEvent',function(){this.getSchoolName})则会报错，因为该this是School组件实例对象，没有该方法。\r\n    因此要直接写回调函数则须使用箭头函数形式，这样this就找到了mounted()函数的调用者，这样this代表App组件实例，可以调用该方法。 */\n\n    // 下面语句打印this为School组件实例，这种方式不能使用this.getSchoolName，会报错\n    // this.$refs.school.$on(\"myEvent5\",function(name){console.log(this);this.getSchoolName(name)})\n    // 写成箭头含数才能用this.getSchoolName，如下所示\n    this.$refs.school.$on(\"myEvent5\", name => {\n      this.getSchoolName(name);\n    });\n    // 或者直接将逻辑写在箭头函数里面\n    // this.$refs.school.$on(\"myEvent5\", (name) => {console.log(\"App收到了学校名：\", name);});\n  }\n};","map":{"version":3,"names":["Student","School","name","components","data","msg","studentName","methods","getStudentName","params","console","log","myTest","getSchoolName","getSchoolAddress","address","mounted","$refs","school","$on","$once"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <!-- \r\n\r\n  <div class=\"app\">\r\n    <h1>{{ msg }}学生姓名是：{{ studentName }}</h1>\r\n\r\n    <!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第一种写法，使用@或v-on） -->\r\n    <Student @myEvent=\"getStudentName\" @myEvent2=\"myTest\" />\r\n\r\n    <!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第二种写法，使用ref） -->\r\n    <School ref=\"school\" />\r\n\r\n    <!-- 原生事件写在组件标签中不使用native修饰会被当作自定义事件 -->\r\n    <!-- <School ref=\"school\" @click.native=\"getSchoolAddress\" /> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Student from \"./components/Student\";\r\nimport School from \"./components/School\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: { School, Student },\r\n  data() {\r\n    return {\r\n      msg: \"你好啊！\",\r\n      studentName: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // 自定义事件myEvent的回调函数\r\n    getStudentName(name, ...params) {\r\n      // ...表示剩余参数，即name接收第一个参数，剩余的参数由params数组接收。\r\n      console.log(\"App收到了学生名：\", name, params);\r\n      this.studentName = name;\r\n    },\r\n    myTest() {\r\n      console.log(\"myEvent2事件被触发了！\");\r\n    },\r\n    getSchoolName(name) {\r\n      console.log(\"App收到了学校名：\", name);\r\n    },\r\n    getSchoolAddress(address) {\r\n      console.log(\"App收到了学校地址：\" + address);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$refs.school.$on(\"myEvent3\", this.getSchoolName); //使用$on()方法绑定自定义事件\r\n    this.$refs.school.$once(\"myEvent4\", this.getSchoolAddress); //绑定自定义事件（一次性）\r\n    /* \t$emit()方法传递的参数会传给$on()方法中的第二个参数使用，第二个参数是一个回调函数。\r\n\t$on()方法中回调函数的this是该方法调用者，即School组件实例。\r\n\t但是这里是写在mounted函数中，使用this调用了methods中的方法，this指的是当前App组件实例对象。\r\n\t如果直接写回调函数例如$on('myEvent',function(){this.getSchoolName})则会报错，因为该this是School组件实例对象，没有该方法。\r\n\t因此要直接写回调函数则须使用箭头函数形式，这样this就找到了mounted()函数的调用者，这样this代表App组件实例，可以调用该方法。 */\r\n\r\n    // 下面语句打印this为School组件实例，这种方式不能使用this.getSchoolName，会报错\r\n    // this.$refs.school.$on(\"myEvent5\",function(name){console.log(this);this.getSchoolName(name)})\r\n    // 写成箭头含数才能用this.getSchoolName，如下所示\r\n    this.$refs.school.$on(\"myEvent5\", (name) => {this.getSchoolName(name);});\r\n    // 或者直接将逻辑写在箭头函数里面\r\n    // this.$refs.school.$on(\"myEvent5\", (name) => {console.log(\"App收到了学校名：\", name);});\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app {\r\n  background-color: gray;\r\n  padding: 5px;\r\n}\r\n</style>\r\n"],"mappings":"AAkBA,OAAAA,OAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAF,MAAA;IAAAD;EAAA;EACAI,KAAA;IACA;MACAC,GAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,eAAAN,IAAA,KAAAO,MAAA;MACA;MACAC,OAAA,CAAAC,GAAA,eAAAT,IAAA,EAAAO,MAAA;MACA,KAAAH,WAAA,GAAAJ,IAAA;IACA;IACAU,OAAA;MACAF,OAAA,CAAAC,GAAA;IACA;IACAE,cAAAX,IAAA;MACAQ,OAAA,CAAAC,GAAA,eAAAT,IAAA;IACA;IACAY,iBAAAC,OAAA;MACAL,OAAA,CAAAC,GAAA,iBAAAI,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,KAAA,CAAAC,MAAA,CAAAC,GAAA,kBAAAN,aAAA;IACA,KAAAI,KAAA,CAAAC,MAAA,CAAAE,KAAA,kBAAAN,gBAAA;IACA;AACA;AACA;AACA;AACA;;IAEA;IACA;IACA;IACA,KAAAG,KAAA,CAAAC,MAAA,CAAAC,GAAA,aAAAjB,IAAA;MAAA,KAAAW,aAAA,CAAAX,IAAA;IAAA;IACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}