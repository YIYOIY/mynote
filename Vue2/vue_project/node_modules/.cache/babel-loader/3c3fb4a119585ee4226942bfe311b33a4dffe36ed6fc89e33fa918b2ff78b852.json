{"ast":null,"code":"import Student from \"./components/Student\";\nimport School from \"./components/School\";\nexport default {\n  name: \"App\",\n  components: {\n    School,\n    Student\n  },\n  data() {\n    return {\n      msg: \"你好啊！\",\n      studentName: \"\"\n    };\n  },\n  methods: {\n    getSchoolName(name) {\n      console.log(\"App收到了学校名：\", name);\n    },\n    // 自定义事件myEvent的回调函数\n    getStudentName(name, ...params) {\n      // ...表示剩余参数，即name接收第一个参数，剩余的参数由params数组接收。\n      console.log(\"App收到了学生名：\", name, params);\n      this.studentName = name;\n    },\n    myTest() {\n      console.log(\"myEvent2事件被触发了！\");\n    },\n    getSchoolAddress(address) {\n      console.log(\"App收到了学校地址：\" + address);\n    }\n  },\n  mounted() {\n    this.$refs.school.$on(\"myEvent3\", this.getSchoolAddress(this.address)); //使用$on()方法绑定自定义事件\n    // this.$refs.school.$once('myEvent3',this.getSchoolAddress) //绑定自定义事件（一次性）\n  }\n};","map":{"version":3,"names":["Student","School","name","components","data","msg","studentName","methods","getSchoolName","console","log","getStudentName","params","myTest","getSchoolAddress","address","mounted","$refs","school","$on"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <!-- \r\n\t\t- 之前学习了使用props实现父子组件之间的通信，下面学习自定义事件实现父子组件间的通信。\r\n\r\n\t\t- 自定义事件通常使用在组件标签上。绑定在组件标签上的事件会被当作自定义事件，即使是js中的事件也不例外，\r\n\t\t  因此原生js事件想要在组件标签中正常触发，需要使用native修饰符，例如@click.native\r\n\r\n\t\t- 使用场景：A是父组件，B是子组件，B要传数据给A，那么就要在A中给B绑定自定义事件。其中事件的回调在A中。\r\n\r\n\t\t- 绑定自定义事件方式：\r\n\t\t\t- 第一种方式：<Demo @自定义事件=\"callback\"/>  或 <Demo v-on:自定义事件=\"callback\"/>\r\n\t\t\t- 第二种方式：先使用ref标记组件标签：<Demo ref=\"demo\"/>，然后获取到该组件实例调用$on()方法绑定事件。\r\n\t\t\t \t\t\t一般在mounted()函数中调用$on()方法：mounted(){ this.$refs.demo.$on('自定义事件',callback)}\r\n\t\t\t若想让自定义事件只触发一次，第一种方式可以使用once修饰符：@myEvent.once；第二种方式可以使用$once()方法。\r\n\r\n\t\t- 触发自定义事件：this.$emit('自定义事件',数据)，接收多个数据的时候可以用剩余参数“...参数名”接收，剩余参数是一个数组。\r\n\t\t- 解绑自定义事件：this.$off('自定义事件')，解绑多个事件则参数写成数组形似：this.$off(['事件1','事件2'])\r\n\r\n\t -->\r\n\r\n  <div class=\"app\">\r\n    <h1>{{ msg }}学生姓名是：{{ studentName }}</h1>\r\n\r\n    <!-- 通过父组件给子组件传递函数类型的props实现子组件给父组件传递数据 -->\r\n    <School :getSchoolName=\"getSchoolName\" />\r\n\r\n    <!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第一种写法，使用@或v-on） -->\r\n    <Student @myEvent=\"getStudentName\" @myEvent2=\"myTest\" />\r\n\r\n    <!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第二种写法，使用ref） -->\r\n    <School ref=\"school\" @click.native=\"getSchoolAddress\" />\r\n    <!-- 原生事件写在组件标签中不使用native修饰会被当作自定义事件 -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Student from \"./components/Student\";\r\nimport School from \"./components/School\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: { School, Student },\r\n  data() {\r\n    return {\r\n      msg: \"你好啊！\",\r\n      studentName: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    getSchoolName(name) {\r\n      console.log(\"App收到了学校名：\", name);\r\n    },\r\n\r\n    // 自定义事件myEvent的回调函数\r\n    getStudentName(name, ...params) {\r\n      // ...表示剩余参数，即name接收第一个参数，剩余的参数由params数组接收。\r\n      console.log(\"App收到了学生名：\", name, params);\r\n      this.studentName = name;\r\n    },\r\n    myTest() {\r\n      console.log(\"myEvent2事件被触发了！\");\r\n    },\r\n\r\n    getSchoolAddress(address) {\r\n      console.log(\"App收到了学校地址：\"+address);\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$refs.school.$on(\"myEvent3\", this.getSchoolAddress(this.address)); //使用$on()方法绑定自定义事件\r\n    // this.$refs.school.$once('myEvent3',this.getSchoolAddress) //绑定自定义事件（一次性）\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app {\r\n  background-color: gray;\r\n  padding: 5px;\r\n}\r\n</style>\r\n"],"mappings":"AAoCA,OAAAA,OAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IAAAF,MAAA;IAAAD;EAAA;EACAI,KAAA;IACA;MACAC,GAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACAC,cAAAN,IAAA;MACAO,OAAA,CAAAC,GAAA,eAAAR,IAAA;IACA;IAEA;IACAS,eAAAT,IAAA,KAAAU,MAAA;MACA;MACAH,OAAA,CAAAC,GAAA,eAAAR,IAAA,EAAAU,MAAA;MACA,KAAAN,WAAA,GAAAJ,IAAA;IACA;IACAW,OAAA;MACAJ,OAAA,CAAAC,GAAA;IACA;IAEAI,iBAAAC,OAAA;MACAN,OAAA,CAAAC,GAAA,iBAAAK,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,KAAA,CAAAC,MAAA,CAAAC,GAAA,kBAAAL,gBAAA,MAAAC,OAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}