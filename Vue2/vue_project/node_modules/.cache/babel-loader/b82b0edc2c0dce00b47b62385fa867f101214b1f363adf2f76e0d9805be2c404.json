{"ast":null,"code":"export default {\n  name: \"MyItem\",\n  // 接收MyList传递的参数\n  props: [\"todo\"],\n  methods: {\n    // 勾选和取消勾选\n    handleCheck(id) {\n      this.$bus.$emit(\"checkTodo\", id); // 调用App将id对应的todo对象的done值取反\n    },\n\n    // 删除todo\n    handleDelete(id) {\n      if (confirm(\"确定删除吗？\")) {\n        this.$bus.$emit(\"deleteTodo\", id); //通知App组件将对应的todo对象删除\n      }\n    },\n\n    // 编辑\n    handleEdit(todo) {\n      if (todo.hasOwnProperty(\"isEdit\")) {\n        todo.isEdit = true;\n      } else {\n        this.$set(todo, \"isEdit\", true); // 没有该属性则添加一个属性，注意要用Vue.set()或者$set()添加响应式的属性\n      }\n      /* $nextTick(callback)：在下一次 DOM 更新结束后执行其指定的回调。\r\n        即当前一轮的操作改变了数据而造成了页面的更新，则$nextTick()中的回调函数会在这一轮页面更新后再被调用。\r\n        例如当前函数内的操作就可以表示是一轮操作，函数结束后页面更新后$nextTick()中的函数才执行。\r\n        */\n      this.$nextTick(function () {\n        this.$refs.inputTitle.focus(); // 让输入框获取焦点\n      });\n    },\n\n    //失去焦点，执行修改逻辑 (当然也可以考虑用v-model实现)\n    handleBlur(todo, e) {\n      todo.isEdit = false;\n      // trim()去掉前后空格返回的字符串。如果返回空串，那么布尔值就是false；返回非空串，布尔值就是true。\n      if (!e.target.value.trim()) return alert(\"输入不能为空！\");\n      this.$bus.$emit(\"updateTodo\", todo.id, e.target.value);\n    }\n  }\n};","map":{"version":3,"names":["name","props","methods","handleCheck","id","$bus","$emit","handleDelete","confirm","handleEdit","todo","hasOwnProperty","isEdit","$set","$nextTick","$refs","inputTitle","focus","handleBlur","e","target","value","trim","alert"],"sources":["src/components/MyItem.vue"],"sourcesContent":["<template>\r\n  <li>\r\n    <label>\r\n      <!-- checked的值为真表示选上，为假表示未选上 -->\r\n      <!-- change事件表示当前元素发生了变化则触发事件修改todo对象的done值 -->\r\n      <input\r\n        type=\"checkbox\"\r\n        :checked=\"todo.done\"\r\n        @change=\"handleCheck(todo.id)\"\r\n      />\r\n      <!-- 当然上述操作可以使用v-model完成，v-model是双向数据绑定，会修改todo的值，但是todo是props接收的数据，\r\n           props的数据原则上是不允许修改的，所以不建议使用v-model -->\r\n      <!-- <input type=\"checkbox\" v-model=\"todo.done\"> -->\r\n\r\n      <!-- isEdit是给todo对象添加的一个属性，如果该值为true则显示输入框(编辑状态) -->\r\n      <span v-show=\"!todo.isEdit\">{{ todo.title }}</span>\r\n      <input\r\n        type=\"text\"\r\n        v-show=\"todo.isEdit\"\r\n        :value=\"todo.title\"\r\n        @blur=\"handleBlur(todo, $event)\"\r\n        ref=\"inputTitle\"\r\n      />\r\n    </label>\r\n    <button class=\"btn btn-danger\" @click=\"handleDelete(todo.id)\">删除</button>\r\n    <button v-show=\"!todo.isEdit\" class=\"btn btn-edit\" @click=\"handleEdit(todo)\">编辑</button>\r\n  </li>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"MyItem\",\r\n  // 接收MyList传递的参数\r\n  props: [\"todo\"],\r\n  methods: {\r\n    // 勾选和取消勾选\r\n    handleCheck(id) {\r\n      this.$bus.$emit(\"checkTodo\", id); // 调用App将id对应的todo对象的done值取反\r\n    },\r\n    // 删除todo\r\n    handleDelete(id) {\r\n      if (confirm(\"确定删除吗？\")) {\r\n        this.$bus.$emit(\"deleteTodo\", id); //通知App组件将对应的todo对象删除\r\n      }\r\n    },\r\n    // 编辑\r\n    handleEdit(todo) {\r\n      if (todo.hasOwnProperty(\"isEdit\")) {\r\n        \r\n        todo.isEdit = true;\r\n      } else {\r\n        this.$set(todo, \"isEdit\", true); // 没有该属性则添加一个属性，注意要用Vue.set()或者$set()添加响应式的属性\r\n      }\r\n      /* $nextTick(callback)：在下一次 DOM 更新结束后执行其指定的回调。\r\n        即当前一轮的操作改变了数据而造成了页面的更新，则$nextTick()中的回调函数会在这一轮页面更新后再被调用。\r\n        例如当前函数内的操作就可以表示是一轮操作，函数结束后页面更新后$nextTick()中的函数才执行。\r\n        */\r\n      this.$nextTick(function () {\r\n        this.$refs.inputTitle.focus();  // 让输入框获取焦点\r\n      });\r\n    },\r\n    //失去焦点，执行修改逻辑 (当然也可以考虑用v-model实现)\r\n    handleBlur(todo, e) {\r\n      todo.isEdit = false;\r\n      // trim()去掉前后空格返回的字符串。如果返回空串，那么布尔值就是false；返回非空串，布尔值就是true。\r\n      if (!e.target.value.trim()) return alert(\"输入不能为空！\");\r\n      this.$bus.$emit(\"updateTodo\", todo.id, e.target.value);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/*item*/\r\nli {\r\n  list-style: none;\r\n  height: 36px;\r\n  line-height: 36px;\r\n  padding: 0 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nli label {\r\n  float: left;\r\n  cursor: pointer;\r\n}\r\n\r\nli label li input {\r\n  vertical-align: middle;\r\n  margin-right: 6px;\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n\r\nli button {\r\n  float: right;\r\n  display: none;\r\n  margin-top: 3px;\r\n}\r\n\r\nli:before {\r\n  content: initial;\r\n}\r\n\r\nli:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\nli:hover {\r\n  background-color: #ddd;\r\n}\r\n\r\nli:hover button {\r\n  display: block;\r\n}\r\n</style>"],"mappings":"AA8BA;EACAA,IAAA;EACA;EACAC,KAAA;EACAC,OAAA;IACA;IACAC,YAAAC,EAAA;MACA,KAAAC,IAAA,CAAAC,KAAA,cAAAF,EAAA;IACA;;IACA;IACAG,aAAAH,EAAA;MACA,IAAAI,OAAA;QACA,KAAAH,IAAA,CAAAC,KAAA,eAAAF,EAAA;MACA;IACA;;IACA;IACAK,WAAAC,IAAA;MACA,IAAAA,IAAA,CAAAC,cAAA;QAEAD,IAAA,CAAAE,MAAA;MACA;QACA,KAAAC,IAAA,CAAAH,IAAA;MACA;MACA;AACA;AACA;AACA;MACA,KAAAI,SAAA;QACA,KAAAC,KAAA,CAAAC,UAAA,CAAAC,KAAA;MACA;IACA;;IACA;IACAC,WAAAR,IAAA,EAAAS,CAAA;MACAT,IAAA,CAAAE,MAAA;MACA;MACA,KAAAO,CAAA,CAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA,WAAAC,KAAA;MACA,KAAAlB,IAAA,CAAAC,KAAA,eAAAI,IAAA,CAAAN,EAAA,EAAAe,CAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}