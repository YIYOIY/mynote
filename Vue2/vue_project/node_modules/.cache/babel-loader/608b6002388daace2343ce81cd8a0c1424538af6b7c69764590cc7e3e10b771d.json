{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport MyFooter from \"./components/MyFooter.vue\";\nimport MyHeader from \"./components/MyHeader.vue\";\nimport MyList from \"./components/MyList.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    MyHeader,\n    MyList,\n    MyFooter\n  },\n  data() {\n    return {\n      // 从浏览器本地存储中获取值\n      todoList: JSON.parse(localStorage.getItem(\"todoList\")) || [] // 如果前者为false（null也算），则取后者的值。\n      // JSON.parse(String)表示将一个JSON格式的字符串解析成一个JSON对象，JSON.parse(null)的结果依然是null。\n    };\n  },\n\n  methods: {\n    // 添加一个todo\n    addTodo(todoObj) {\n      this.todoList.unshift(todoObj);\n    },\n    //全选和取消全选\n    checkAllTodo(done) {\n      this.todoList.forEach(todo => {\n        todo.done = done;\n      });\n    },\n    //清除所有已经完成的todo\n    clearAllTodo() {\n      this.todoList = this.todoList.filter(todo => {\n        return !todo.done; // filter()方法默认会筛选过滤条件为true的元素组成新的数组并返回。\n      });\n    }\n  },\n\n  // 监视todoList\n  watch: {\n    todoList: {\n      deep: true,\n      // 开启深度监视，因为变化的是对象中的属性，开启深度监视才能监视到其变化。\n      handler(value) {\n        // 只要todoList发生了变化，就重新存到浏览器本地存储中\n        localStorage.setItem(\"todoList\", JSON.stringify(value));\n        // JSON.stringify(Object)表示将一个对象转换成JSON格式的字符串\n      }\n    }\n  },\n\n  mounted() {\n    // 使用全局事件总线进行组件间的通信\n    // 勾选和取消勾选\n    this.$bus.$on(\"checkTodo\", id => {\n      this.todoList.forEach(todo => {\n        if (todo.id === id) todo.done = !todo.done;\n      });\n    });\n    // 根据id删除todo\n    this.$bus.$on(\"deleteTodo\", id => {\n      this.todoList = this.todoList.filter(todo => todo.id !== id); // 使用过滤器，记得重新赋值\n    });\n    // 根据id修改todo\n    this.$bus.$on(\"updateTodo\", (id, title) => {\n      this.todoList.forEach;\n      if (this.todoList.id === id) this.todoList.title = title;\n    });\n  }\n};","map":{"version":3,"names":["MyFooter","MyHeader","MyList","name","components","data","todoList","JSON","parse","localStorage","getItem","methods","addTodo","todoObj","unshift","checkAllTodo","done","forEach","todo","clearAllTodo","filter","watch","deep","handler","value","setItem","stringify","mounted","$bus","$on","id","title"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"todo-container\">\n      <div class=\"todo-wrap\">\n        <!-- 给子组件MyHeader绑定自定义事件addTodo -->\n        <MyHeader @addTodo=\"addTodo\" />\n        <!-- checkTodo()方法传给子组件MyList，MyList再传给MyItem。deleteTodo()亦是如此-->\n        <MyList :todoList=\"todoList\" />\n        <!-- 给子组件MyFooter绑定自定义事件checkAllTodo、clearAllTodo -->\n        <MyFooter\n          :todoList=\"todoList\"\n          @checkAllTodo=\"checkAllTodo\"\n          @clearAllTodo=\"clearAllTodo\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport MyFooter from \"./components/MyFooter.vue\";\nimport MyHeader from \"./components/MyHeader.vue\";\nimport MyList from \"./components/MyList.vue\";\nexport default {\n  name: \"App\",\n  components: { MyHeader, MyList, MyFooter },\n  data() {\n    return {\n      // 从浏览器本地存储中获取值\n      todoList: JSON.parse(localStorage.getItem(\"todoList\")) || [], // 如果前者为false（null也算），则取后者的值。\n      // JSON.parse(String)表示将一个JSON格式的字符串解析成一个JSON对象，JSON.parse(null)的结果依然是null。\n    };\n  },\n  methods: {\n    // 添加一个todo\n    addTodo(todoObj) {\n      this.todoList.unshift(todoObj);\n    },\n    //全选和取消全选\n    checkAllTodo(done) {\n      this.todoList.forEach((todo) => {\n        todo.done = done;\n      });\n    },\n    //清除所有已经完成的todo\n    clearAllTodo() {\n      this.todoList = this.todoList.filter((todo) => {\n        return !todo.done; // filter()方法默认会筛选过滤条件为true的元素组成新的数组并返回。\n      });\n    },\n  },\n  // 监视todoList\n  watch: {\n    todoList: {\n      deep: true, // 开启深度监视，因为变化的是对象中的属性，开启深度监视才能监视到其变化。\n      handler(value) {\n        // 只要todoList发生了变化，就重新存到浏览器本地存储中\n        localStorage.setItem(\"todoList\", JSON.stringify(value));\n        // JSON.stringify(Object)表示将一个对象转换成JSON格式的字符串\n      },\n    },\n  },\n\n  mounted() {\n    // 使用全局事件总线进行组件间的通信\n    // 勾选和取消勾选\n    this.$bus.$on(\"checkTodo\", (id) => {\n      this.todoList.forEach((todo) => {\n        if (todo.id === id) todo.done = !todo.done;\n      });\n    });\n    // 根据id删除todo\n    this.$bus.$on(\"deleteTodo\", (id) => {\n      this.todoList = this.todoList.filter((todo) => todo.id !== id); // 使用过滤器，记得重新赋值\n    });\n    // 根据id修改todo\n    this.$bus.$on(\"updateTodo\", (id,title) => {\n      this.todoList.forEach\n      \n      if (this.todoList.id === id) this.todoList.title = title;\n    });\n  },\n};\n</script>\n\n<style>\n/*一般一些通用的样式就放在App组件的样式中*/\n/*base*/\nbody {\n  background: #fff;\n}\n.btn {\n  display: inline-block;\n  padding: 4px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),\n    0 1px 2px rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n}\n.btn-danger {\n  color: #fff;\n  background-color: #da4f49;\n  border: 1px solid #bd362f;\n}\n.btn-edit {\n  color: #fff;\n  background-color: skyblue;\n  border: 1px solid rgb(103, 159, 180);\n  margin-right: 5px;\n}\n.btn-danger:hover {\n  color: #fff;\n  background-color: #bd362f;\n}\n.btn:focus {\n  outline: none;\n}\n.todo-container {\n  width: 600px;\n  margin: 0 auto;\n}\n.todo-container .todo-wrap {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":";AAoBA,OAAAA,QAAA;AACA,OAAAC,QAAA;AACA,OAAAC,MAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAH,QAAA;IAAAC,MAAA;IAAAF;EAAA;EACAK,KAAA;IACA;MACA;MACAC,QAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACA;IACA;EACA;;EACAC,OAAA;IACA;IACAC,QAAAC,OAAA;MACA,KAAAP,QAAA,CAAAQ,OAAA,CAAAD,OAAA;IACA;IACA;IACAE,aAAAC,IAAA;MACA,KAAAV,QAAA,CAAAW,OAAA,CAAAC,IAAA;QACAA,IAAA,CAAAF,IAAA,GAAAA,IAAA;MACA;IACA;IACA;IACAG,aAAA;MACA,KAAAb,QAAA,QAAAA,QAAA,CAAAc,MAAA,CAAAF,IAAA;QACA,QAAAA,IAAA,CAAAF,IAAA;MACA;IACA;EACA;;EACA;EACAK,KAAA;IACAf,QAAA;MACAgB,IAAA;MAAA;MACAC,QAAAC,KAAA;QACA;QACAf,YAAA,CAAAgB,OAAA,aAAAlB,IAAA,CAAAmB,SAAA,CAAAF,KAAA;QACA;MACA;IACA;EACA;;EAEAG,QAAA;IACA;IACA;IACA,KAAAC,IAAA,CAAAC,GAAA,cAAAC,EAAA;MACA,KAAAxB,QAAA,CAAAW,OAAA,CAAAC,IAAA;QACA,IAAAA,IAAA,CAAAY,EAAA,KAAAA,EAAA,EAAAZ,IAAA,CAAAF,IAAA,IAAAE,IAAA,CAAAF,IAAA;MACA;IACA;IACA;IACA,KAAAY,IAAA,CAAAC,GAAA,eAAAC,EAAA;MACA,KAAAxB,QAAA,QAAAA,QAAA,CAAAc,MAAA,CAAAF,IAAA,IAAAA,IAAA,CAAAY,EAAA,KAAAA,EAAA;IACA;IACA;IACA,KAAAF,IAAA,CAAAC,GAAA,gBAAAC,EAAA,EAAAC,KAAA;MACA,KAAAzB,QAAA,CAAAW,OAAA;MAEA,SAAAX,QAAA,CAAAwB,EAAA,KAAAA,EAAA,OAAAxB,QAAA,CAAAyB,KAAA,GAAAA,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}