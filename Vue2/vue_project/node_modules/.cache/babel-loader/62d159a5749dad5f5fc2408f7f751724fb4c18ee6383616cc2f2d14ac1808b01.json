{"ast":null,"code":"// 导入axios\nimport axios from 'axios';\nexport default {\n  name: \"Search\",\n  data() {\n    return {\n      keyword: ''\n    };\n  },\n  methods: {\n    searchUsers() {\n      //请求前先更新List的数据以及状态信息\n      this.$bus.$emit('updateData', {\n        isFirst: false,\n        isLoading: true,\n        errMsg: '',\n        users: []\n      });\n      //发送Ajax请求（查询github用户接口为：https://api.github.com/search/users?q=xxx），这里需要用到模板字符串（``），方便传入参数\n      axios.get(`https://api.github.com/search/users?q=${this.keyword}`).then(response => {\n        console.log('请求成功了');\n        // 请求成功后更新数据\n        // 注意axios返回的是一个Promise对象，返回的数据存储在该对象的PromiseResult属性中。\n        // then()方法的第一个参数为一个相应成功的对象，该对象中的data属性存储着PromiseResult属性中成功的数据，第二个参数则反之。\n        this.$bus.$emit('updateData', {\n          isLoading: false,\n          errMsg: '',\n          users: response.data.items\n        }); // 用户信息在接口返回的对象的item属性中\n      }, error => {\n        // 请求失败后更新数据（主要是提示错误信息，清空列表信息）\n        this.$bus.$emit('updateData', {\n          isLoading: false,\n          errMsg: error.message,\n          users: response.data.items\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","keyword","methods","searchUsers","$bus","$emit","isFirst","isLoading","errMsg","users","get","then","response","console","log","items","error","message"],"sources":["src/components/Search.vue"],"sourcesContent":["<template>\r\n  <section class=\"jumbotron\">\r\n    <h3 class=\"jumbotron-heading\">Search Github Users</h3>\r\n    <div>\r\n    \t<input type=\"text\" placeholder=\"enter the name you search\" v-model=\"keyword\"/>&nbsp;\r\n\t\t<button @click=\"searchUsers\">Search</button>\r\n    </div>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\n// 导入axios\r\nimport axios from 'axios'\r\nexport default {\r\n  name: \"Search\",\r\n  data() {\r\n\treturn {\r\n\t\tkeyword:''\r\n\t}\r\n  },\r\n  methods: {\r\n\tsearchUsers(){\r\n\t\t//请求前先更新List的数据以及状态信息\r\n\t\tthis.$bus.$emit('updateData',{isFirst:false,isLoading:true,errMsg:'',users:[]})\r\n\t\t//发送Ajax请求（查询github用户接口为：https://api.github.com/search/users?q=xxx），这里需要用到模板字符串（``），方便传入参数\r\n\t\taxios.get(`https://api.github.com/search/users?q=${this.keyword}`).then(\r\n\t\t\tresponse =>{\r\n\t\t\t\tconsole.log('请求成功了')\r\n\t\t\t\t// 请求成功后更新数据\r\n\t\t\t\t// 注意axios返回的是一个Promise对象，返回的数据存储在该对象的PromiseResult属性中。\r\n\t\t\t\t// then()方法的第一个参数为一个相应成功的对象，该对象中的data属性存储着PromiseResult属性中成功的数据，第二个参数则反之。\r\n\t\t\t\tthis.$bus.$emit('updateData',{isLoading:false,errMsg:'',users:response.data.items})\t// 用户信息在接口返回的对象的item属性中\r\n\t\t\t},\r\n\t\t\terror =>{\r\n\t\t\t\t// 请求失败后更新数据（主要是提示错误信息，清空列表信息）\r\n\t\t\t\tthis.$bus.$emit('updateData',{isLoading:false,errMsg:error.message,users:response.data.items})\r\n\t\t\t}\r\n\t\t)\r\n\r\n\t}\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AAWA;AACA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACA;MACA,KAAAC,IAAA,CAAAC,KAAA;QAAAC,OAAA;QAAAC,SAAA;QAAAC,MAAA;QAAAC,KAAA;MAAA;MACA;MACAX,KAAA,CAAAY,GAAA,+CAAAT,OAAA,IAAAU,IAAA,CACAC,QAAA;QACAC,OAAA,CAAAC,GAAA;QACA;QACA;QACA;QACA,KAAAV,IAAA,CAAAC,KAAA;UAAAE,SAAA;UAAAC,MAAA;UAAAC,KAAA,EAAAG,QAAA,CAAAZ,IAAA,CAAAe;QAAA;MACA,GACAC,KAAA;QACA;QACA,KAAAZ,IAAA,CAAAC,KAAA;UAAAE,SAAA;UAAAC,MAAA,EAAAQ,KAAA,CAAAC,OAAA;UAAAR,KAAA,EAAAG,QAAA,CAAAZ,IAAA,CAAAe;QAAA;MACA,EACA;IAEA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}