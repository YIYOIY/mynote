{"ast":null,"code":"export default {\n  name: \"MyItem\",\n  // 接收MyList传递的参数\n  props: [\"todo\"],\n  methods: {\n    // 勾选和取消勾选\n    handleCheck(id) {\n      this.$bus.$emit(\"checkTodo\", id); // 调用App将id对应的todo对象的done值取反\n    },\n\n    // 删除todo\n    handleDelete(id) {\n      if (confirm(\"确定删除吗？\")) {\n        this.$bus.$emit('deleteTodo', id); //通知App组件将对应的todo对象删除\n      }\n    },\n\n    // 编辑\n    handleEdit(todo) {\n      if (todo.hasOwnProperty('isEdit')) {\n        // hasOwnProperty()判断自己是否拥有该属性\n        todo.isEdit = true;\n      } else {\n        this.$set(todo, 'isEdit', true); // 没有该属性则添加一个属性，注意要用Vue.set()或者$set()添加响应式的属性\n      }\n      /* $nextTick(callback)：在下一次 DOM 更新结束后执行其指定的回调，\r\n      即当前一轮的操作改变了数据而造成了页面的更新，  则$nextTick()中的回调函数会在这一轮页面更新后再被调用。\r\n        */\n      this.$nextTick(function () {\n        this.$refs.inputTitle.focus();\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","props","methods","handleCheck","id","$bus","$emit","handleDelete","confirm","handleEdit","todo","hasOwnProperty","isEdit","$set","$nextTick","$refs","inputTitle","focus"],"sources":["src/components/MyItem.vue"],"sourcesContent":["<template>\r\n  <li>\r\n    <label>\r\n      <!-- checked的值为真表示选上，为假表示未选上 -->\r\n      <!-- change事件表示当前元素发生了变化则触发事件修改todo对象的done值 -->\r\n      <input\r\n        type=\"checkbox\"\r\n        :checked=\"todo.done\"\r\n        @change=\"handleCheck(todo.id)\"\r\n      />\r\n      <!-- 当然上述操作可以使用v-model完成，v-model是双向数据绑定，会修改todo的值，但是todo是props接收的数据，\r\n           props的数据原则上是不允许修改的，所以不建议使用v-model -->\r\n      <!-- <input type=\"checkbox\" v-model=\"todo.done\"> -->\r\n      <span>{{ todo.title }}</span>\r\n    </label>\r\n    <button class=\"btn btn-danger\" @click=\"handleDelete(todo.id)\">删除</button>\r\n    <button class=\"btn btn-edit\" @click=\"handleEdit(todo)\">编辑</button>\r\n  </li>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"MyItem\",\r\n  // 接收MyList传递的参数\r\n  props: [\"todo\"],\r\n  methods: {\r\n    // 勾选和取消勾选\r\n    handleCheck(id) {\r\n      this.$bus.$emit(\"checkTodo\", id); // 调用App将id对应的todo对象的done值取反\r\n    },\r\n    // 删除todo\r\n    handleDelete(id) {\r\n      if (confirm(\"确定删除吗？\")) {\r\n        this.$bus.$emit('deleteTodo', id);  //通知App组件将对应的todo对象删除\r\n      }\r\n    },\r\n    // 编辑\r\n      handleEdit(todo){\r\n        if(todo.hasOwnProperty('isEdit')){  // hasOwnProperty()判断自己是否拥有该属性\r\n\t\t\t\t\ttodo.isEdit = true\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.$set(todo,'isEdit',true) // 没有该属性则添加一个属性，注意要用Vue.set()或者$set()添加响应式的属性\r\n\t\t\t\t}\r\n        /* $nextTick(callback)：在下一次 DOM 更新结束后执行其指定的回调，\r\n        即当前一轮的操作改变了数据而造成了页面的更新，  则$nextTick()中的回调函数会在这一轮页面更新后再被调用。\r\n\r\n        */\r\n\t\t\t\tthis.$nextTick(function(){  \r\n        \r\n\t\t\t\t\tthis.$refs.inputTitle.focus() \r\n\t\t\t\t})\r\n      }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/*item*/\r\nli {\r\n  list-style: none;\r\n  height: 36px;\r\n  line-height: 36px;\r\n  padding: 0 5px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\nli label {\r\n  float: left;\r\n  cursor: pointer;\r\n}\r\n\r\nli label li input {\r\n  vertical-align: middle;\r\n  margin-right: 6px;\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n\r\nli button {\r\n  float: right;\r\n  display: none;\r\n  margin-top: 3px;\r\n}\r\n\r\nli:before {\r\n  content: initial;\r\n}\r\n\r\nli:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\nli:hover {\r\n  background-color: #ddd;\r\n}\r\n\r\nli:hover button {\r\n  display: block;\r\n}\r\n</style>"],"mappings":"AAqBA;EACAA,IAAA;EACA;EACAC,KAAA;EACAC,OAAA;IACA;IACAC,YAAAC,EAAA;MACA,KAAAC,IAAA,CAAAC,KAAA,cAAAF,EAAA;IACA;;IACA;IACAG,aAAAH,EAAA;MACA,IAAAI,OAAA;QACA,KAAAH,IAAA,CAAAC,KAAA,eAAAF,EAAA;MACA;IACA;;IACA;IACAK,WAAAC,IAAA;MACA,IAAAA,IAAA,CAAAC,cAAA;QAAA;QACAD,IAAA,CAAAE,MAAA;MACA;QACA,KAAAC,IAAA,CAAAH,IAAA;MACA;MACA;AACA;;MAGA,KAAAI,SAAA;QAEA,KAAAC,KAAA,CAAAC,UAAA,CAAAC,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}